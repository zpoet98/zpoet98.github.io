[{"title":"Java this关键字","url":"/2022/05/11/Java-this%E5%85%B3%E9%94%AE%E5%AD%97/","content":"this关键字是 Java 常用的关键字，可用于任何实例方法内指向当前对象，也可指向对其调用当前方法的对象，或者在需要当前类型对象引用时使用。\n下面根分别讲解this关键字的三个主要用法。\nthis.属性名大部分时候，在方法中访问其他方法、成员变量时无须使用this前缀，但如果方法里有局部变量和成员变量同名，但程序又需要在该方法里访问这个被覆盖的成员变量，则必须使用this前缀。\n假设有一个教师类Teacher的定义如下：\nclass Teacher &#123;\t//教师名称\tprivate String name;\t//工资\tprivate double salary;\t//年龄\tprivate int age;&#125;\n\n在上述代码中name、salary和age的作用域是private，因此在类外部无法对它们的值进行设置。为了解决这个问题，可以为Teacher类添加一个构造方法，然后在构造方法中传递参数进行修改。代码如下：\n//创建构造方法，为上面的3个属性赋初始值public Teacher(String name, double salary, int age) &#123;\t//设置教师名称\t\tthis.name = name;   \t//设置教师工资\tthis.salary = salary;   \t//设置教师年龄\tthis.age = age;&#125;\n\n在Teacher类的构造方法中使用了this关键字对属性name、salary和age进行赋值，this表示当前对象。this.name=name语句表示一个赋值语句，等号左边的this.name是指当前对象具有的变量name，等号右边的name表示参数传递过来的数值。\n创建一个main( )方法对Teacher类进行测试，代码如下：\npublic static void main(String[] args) &#123;\tTeacher teacher = new Teacher(&quot;张三&quot;,5000.0,30);\tSystem.out.println(&quot;教师名称：&quot; + teacher.name + \t&quot;\\n教师工资：&quot; + teacher.salary + &quot;\\n教师年龄：&quot; + teacher.age);&#125; /* Output:教师名称：张三教师工资：5000.0教师年龄：30*///:~\n\n\n当一个类的属性（成员变量）名与访问该属性的方法参数名相同时，则需要使用this关键字来访问类中的属性，以区分类的属性和方法中的参数。\n\nthis.方法名this关键字另一个作用是让类中一个方法访问该类里的另一个方法或实例变量。\n假设定义了一个Dog类，其中Dog对象的run( )方法需要调用它的jump( )方法，Dog类代码如下：\nclass Dog &#123;\t//定义一个jump( )方法\tpublic void jump() &#123;\tSystem.out.println(&quot;正在执行jump( )方法&quot;);\t&#125;\t\t//定义一个run( )方法，run( )方法需要借助jump( )方法\tpublic void run() &#123;\tDog d = new Dog();\td.jump();\tSystem.out.println(&quot;正在执行 run( )方法&quot;);\t&#125;&#125;\n\n使用这种方式来定义这个Dog类，确实可以实现在run( )方法中调用jump( )方法。下面再提供一个程序来创建Dog对象，并调用该对象的run( )方法。\npublic class DogTest &#123;\tpublic static void main(String[] args) &#123;\t//创建Dog对象\tDog dog = new Dog();\t// 调用Dog对象的run()方法\tdog.run();\t&#125;&#125;\n\n在上面程序中，一共产生了两个Dog对象 Dog类的run( )方法中，程序创建了一个Dog对象，并使用名为d的引用变量来指向该Dog对象。在DogTest的main( )方法中，程序再次创建了一个Dog对象，并使用名为dog的引用变量来指向该Dog对象。\n下面思考两个问题。\n\n在run( )方法中调用jump( )方法时是否一定需要一个Dog对象？\n\n答案是肯定的，因为没有使用static修饰的成员变量和方法都必须使用对象来调用。\n\n是否一定需要重新创建一个Dog对象？\n\n不一定，因为当程序调用run( )方法时，一定会提供一个Dog对象，这样就可以直接使用这个已经存在的Dog对象，而无须重新创建新的Dog对象了。因此需要在run( )方法中获得调用该方法的对象，通过this关键字就可以满足这个要求。\nthis可以代表任何对象，当this出现在某个方法体中时，它所代表的对象是不确定的，但它的类型是确定的，它所代表的只能是当前类的实例。只有当这个方法被调用时，它所代表的对象才被确定下来，谁在调用这个方法this就代表谁。\n将前面的Dog类的run( )方法改为如下形式会更加合适。run( )方法代码修改如下，其它代码不变。\n/** * 第二种定义Dog类方法 **/// 定义一个run()方法，run()方法需要借助jump()方法public void run() &#123;    // 使用this引用调用run()方法的对象    this.jump();    System.out.println(&quot;正在执行run方法&quot;);&#125;\n\n从第一种 Dog 类定义来看，在 Dog 对象的 run( ) 方法内重新创建了一个新的 Dog 对象，并调用它的 jump( ) 方法，这意味着一个 Dog 对象的 run( ) 方法需要依赖于另一个 Dog 对象的 jump( ) 方法，这不符合逻辑。\n第二种 Dog 类定义是当一个 Dog 对象调用 run( ) 方法时，run( ) 方法需要依赖它自己的 jump( ) 方法，与第一种定义类的方法相比，更符合实际情形。\n在现实世界里，对象的一个方法依赖于另一个方法的情形很常见，例如，吃饭方法依赖于拿筷子方法，写程序方法依赖于敲键盘方法。这种依赖都是同一个对象两个方法之间的依赖。因此，Java 允许对象的一个成员直接调用另一个成员，可以省略 this 前缀。也就是说，将上面的 run( ) 方法改为如下形式也完全正确。\npublic void run() &#123;\tjump();\tSystem.out.println(&quot;正在执行run方法&quot;);&#125;\n\n大部分时候，一个方法访问该类中定义的其他方法、成员变量时加不加this前缀的效果是完全一样的。\n\n对于static修饰的方法而言，可以使用类来直接调用该方法，如果在static修饰的方法中使用this关键字，则这个关键字就无法指向合适的对象。所以，static修饰的方法中不能使用this引用。并且 Java 语法规定，静态成员不能直接访问非静态成员。\n\n省略this前缀只是一种假象，虽然程序员省略了调用jump( )方法之前的this，但实际上这个this依然是存在的。\nthis( )访问构造方法下面定义一个Student类，使用this( )调用构造方法给name赋值，Student类的代码如下：\npublic class Student &#123;\tString name;\t//默认构造器\tpublic Student() &#123;\t\tthis(&quot;张三&quot;);\t&#125;\t\t//含参构造器\tpublic Student(String name) &#123;\t\tthis.name = name;\t&#125;   \t\t//输出 name\tpublic void print() &#123;\t\tSystem.out.println(&quot;姓名：&quot; + name);\t&#125;    \t\tpublic static void main(String[] args) &#123;\t\tStudent student = new Student();\t\tstudent.print();\t&#125;&#125; /* Output:姓名：张三*///:~\n\n\nthis( )不能在普通方法中使用，只能写在构造方法中。在构造方法中使用时，必须是第一条语句。\n\n","categories":["语法 this关键字"],"tags":["Java"]}]